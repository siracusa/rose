=head1 INTRODUCTION

This document provides a step-by-step introduction to the L<Rose::DB::Object> module distribution.  It demonstrates all of the important features using a realistic example database.  This does not replace the actual documentation for each module, however.  The "reference" documentation found in each ".pm" file is still essential, and contains some good examples of its own.

This tutorial provides a gradual introduction to L<Rose::DB::Object>.  It also describes "best practices" for using L<Rose::DB::Object> in the most robust, maintainable manner.  If you're just trying to get a feel for what's possible, you can skip to the end and take a look at the completed example database and associated Perl code.  But I recommend reading the tutorial from start to finish at least once.

The examples will start simple (less abstracted) and then get progressively more complex (more abstracted).  You, the developer, have to decide how much abstraction is appropriate for your particular task.

=head1 CONVENTIONS

The examples in this tutorial will use the fictional C<My::> namespace prefix.  Your code should use whatever namespace you deem appropriate.  Usually, it will be more akin to C<MyCorp::MyProject::> (i.e., your corporation, organization, and/or project).  I've chosen to use C<My::> simply because it's shorter, and will help this tutorial stay within an 80-column width.

For the sake of brevity, the C<use strict> directive and associated "my" declarations have been omitted from the example code.  Needless to say, you should always C<use strict> in your actual code.

Similarly, the traditional "1;" true value used at the end of each ".pm" file has been omitted from the examples.  Don't forget to add this to the end of your actual Perl module files.

=head1 TUTORIAL

=head2 Preface

Before doing anything useful with L<Rose::DB::Object>, it's necessary to create and configure a L<Rose::DB> subclass through which L<Rose::DB::Object>-derived objects will access the database.

To get up to speed quickly with L<Rose::DB>, read the L<Rose::DB::Tutorial> documentation.  The rest of this tutorial will assume the existence of a C<My::DB> class as L<described|Rose::DB::Tutorial/"Multiple data sources using namespaces"> in the L<Rose::DB tutorial|Rose::DB::Tutorial>.

The PostgreSQL ("Postgres") database will be used in the examples in this tutorial, but the features demonstrated will not be specific to that database.  If you are following along with a different database, you may have to adjust the specific syntax used in the SQL table creation statements, but all of the same features should be present in some form.

This tutorial is based on a fictional database schema belonging to a store-like application.  Both the database schema the corresponding Perl classes will evolve over the course of this tutorial.

=head2 Getting started

Let's start with a single table in our fictional store database.

    CREATE TABLE products
    (
      id      SERIAL NOT NULL PRIMARY KEY,
      name    VARCHAR(255) NOT NULL,
      price   DECIMAL(10,2) NOT NULL DEFAULT 0.00,

      UNIQUE(name)
    );

Here's a basic L<Rose::DB::Object> class to front that table:

    package Product;

    use Rose::DB::Object;
    our @ISA = qw(Rose::DB::Object);

    __PACKAGE__->meta->table('products');
    __PACKAGE__->meta->columns(qw(id name price));
    __PACKAGE__->meta->primary_key_columns('id');
    __PACKAGE__->meta->add_unique_key('name');
    __PACKAGE__->meta->initialize;

The steps are simple:

=over 4

=item 1. Inherit from L<Rose::DB::Object>.

=item 2. Name the table.

=item 3. Name the columns.

=item 4. Name the primary key column(s).

=item 5. Add unique keys (if any).

=item 6. Initialize.

=back

Operations 2 through 6 are done through the L<metadata object|Rose::DB::Object::Metadata> associated with this class.  The table must have a primary key, and may have zero or more unique keys.  The primary key and each unique may contain multiple columns.

Of course, L<earlier|/Preface> it was established that L<Rose::DB> needs to be set up for any L<Rose::DB::Object> class to work properly.  To that end, this tutorial assumes the existence of a L<Rose::DB> subclass named L<My::DB> that is set up according to the L<best practices|Rose::DB::Tutorial> of L<Rose::DB>.  We need to make out C<Product> class use L<My::DB>.  Here's one way to do it:

    package Product;

    use My::DB;

    use Rose::DB::Object;
    our @ISA = qw(Rose::DB::Object);

    __PACKAGE__->meta->table('products');
    __PACKAGE__->meta->columns(qw(id name price));
    __PACKAGE__->meta->primary_key_columns('id');
    __PACKAGE__->meta->add_unique_key('name');
    __PACKAGE__->meta->initialize;

    sub init_db { My::DB->new }

Now C<Product> will create a L<My::DB> object when it needs to connect to the database.

=head3 A brief digression: database objects

The L<Rose::DB>-derived database object used by each L<Rose::DB::Object>-derived object is available via the L<db|Rose::DB::Object/db> object attribute.

    $p = Product->new(...);
    $db = $p->db; # My::DB object

See the L<Rose::DB> documentation to explore the capabilities of these db objects.  Most of the time, you won't have to be concerned about them.  But it is sometime important to ensure that all objects share the same C<db>.  For example, imagine creating several C<Product> objects in a single transaction.

    $db = My::DB->new(...);

    $db->begin_work; # Start transaction

    # Use this db object with each product object

    $p1 = Product->new(name => 'Bike', db => $db);
    $p1->save;

    $p2 = Product->new(name => 'Sled', db => $db);
    $p2->save;

    $p3 = Product->new(name => 'Kite', db => $db);
    $p3->save;

    if(...) # Now either commit them all or roll them all back
    {
      $db->commit;
    }
    else
    {
      $db->rollback;    
    }

Cross-database migration is another important use for C<db> objects.  Here's how to move a product from a production database to an archive database.

    $production_db = My::DB->new('production');
    $archive_db    = My::DB->new('archive');

    # Load bike from production database
    $p = Product->new(name => 'Bike', db => $production_db);
    $p->load;

    # Save the bike into the archive database
    $p->db($archive_db);
    $p->save;

    # Delete the bike from the production database
    $p->db($production_db);
    $p->delete;

=head3 Setting up your own base class

Looking forward, it's likely that all of our L<Rose::DB::Object>-derived classes will want to use L<My::DB> objects when connecting to the database.  It's tedious to repeat this code in all of those classes.  A subclass can provide a single, shared location for that code.

    package My::DB::Object;

    use My::DB;

    use Rose::DB::Object;
    our @ISA = qw(Rose::DB::Object);

    sub init_db { My::DB->new }

Now the C<Product> class can inherit from C<My::DB::Object> instead of inheriting from L<Rose::DB::Object> directly.

    package Product;

    use My::DB::Object;
    our @ISA = qw(My::DB::Object);

    __PACKAGE__->meta->table('products');
    __PACKAGE__->meta->columns(qw(id name price));
    __PACKAGE__->meta->primary_key_columns('id');
    __PACKAGE__->meta->add_unique_key('name');
    __PACKAGE__->meta->initialize;

This use of a subclass is strongly recommended.  You will see this pattern repeated several times in this tutorial.  The creation of seemingly "trivial" subclasses is a cheap and easy way to ensure ease of extensibility later on.  

For example, imagine we want to add a C<clone()> method to all of our database objects.  If they all inherit directly from C<Rose::DB::Object>, that's not easy to do.  But if they all inherit from our C<My::DB::Object>, we can just add the C<clone()> method to that class.

The lesson is simple: when in doubt, subclass.  A few minutes spent now can save you a lot more time down the road.

=head3 Database objects in action

Now that we have our C<Product> class all set up, let's see what we can do with it.

=head4 Get and set column values

By default, each column has a combined accessor/mutator method.  When passed a value, the column value is set and returned.  When called with no arguments, the value is simply returned.

    $p->name('Bike'); # set name
    print $p->name;   # get name

Since L<Rose::DB::Object> inherits from L<Rose::Object>, each object method is also a valid constructor argument.

    $p = Product->new(name => 'Cane', price => 1.99);
    print $p->price; # 1.99

=head4 Load

An object can be loaded based on a primary key.

    $p = Product->new(id => 1); # primary key
    $p->load; # Load the object from the database

An object can also be loaded based on a unique key:

    $p = Product->new(name => 'Sled'); # unique key
    $p->load; # Load the object from the database

If there is no row in the database table with the specified primary or unique key value, the call to L<load()|Rose::DB::Object/load> will fail.  Under the default L<error mode|Rose::DB::Object::Metadata/error_mode>, an exception will be thrown.  To  check whether or not such a row exists, use the C<speculative> parameter.

    $p = Product->new(id => 1);

    unless($p->load(speculative => 1))
    {
      print "No such product with id = 1";
    }

Regardless of the L<error mode|Rose::DB::Object::Metadata/error_mode>, L<load()|Rose::DB::Object/load> will simply return true or false when the  C<speculative> parameter is used.

=head4 Insert

First, let's insert some rows.  To do that, we create objects and then L<save|Rose::DB::Object/save> them.

    $p = Product->new(id => 123, name => 'Widget', price => 4.56);
    $p->save; # Insert the object into the database

The default L<error mode|Rose::DB::Object::Metadata/error_mode> will throw an exception if anything goes wrong during the save, so we don't have to check the return value.

Here's another variation:

    $p = Product->new(name => 'Widget', price => 1.23);
    $p->save;

    print $p->id; # print the auto-generated primary key value

Since the primary key of the C<products> table, C<id>, is a SERIAL column, a new primary key value will be auto-generated if one is not specified.  After the object is saved, we can retrieve the auto-generated value.

=head4 Update

To update a row, simply L<save|Rose::DB::Object/save> an object that has been previously L<load|Rose::DB::Object/load>ed or L<save|Rose::DB::Object/save>d.

    $p1 = Product->new(name => 'Sprocket', price => 9.99);
    $p1->save; # Insert a new object into the database

    $p1->price(12.00);
    $p1->save; # Update the object in the database

    $p2 = Product->new(id => 1);
    $p2->load; # Load an existing object

    $p2->name($p2->name . ' Mark II');
    $p2->save; # Update the object in the database

=head4 Delete

An object can be deleted based on a primary key or a unique key.

    $p = Product->new(id => 1); # primary key
    $p->delete; # Delete the object from the database

An object can also be deleted based on a unique key:

    $p = Product->new(name => 'Sled'); # unique key
    $p->delete; # Delete the object from the database

The L<delete|Rose::DB::Object/delete> method will return true if the row was deleted or did not exist, false otherwise.

It works just as well with objects that have been loaded or saved.

    $p1 = Product->new(name => 'Sprocket', price => 9.99);
    $p1->save;   # Insert a new object into the database
    $p1->delete; # Now delete the object

    $p2 = Product->new(id => 1);
    $p2->load;   # Load an existing object
    $p2->delete; # Now delete the object

=head3 Multiple objects

The examples above show select, insert, update, and delete operations on one object at time based on primary or unique keys.  What about manipulating objects based on other criteria?  What about manipulating multiple objects simultaneously?  Enter L<Rose::DB::Object::Manager>, or just "the manager" for short.

But why a separate class for dealing with multiple objects?  Why not simply add more methods to the object itself?  Say, a C<search()> method to go alongside L<load|Rose::DB::Object/load>, L<save|Rose::DB::Object/save>, L<delete|Rose::DB::Object/delete> and friends?  There are several reasons.

It's somewhat "semantically impure" for the class that represents a single object to also be the class that's used to fetch multiple objects.  It's also important to keep the object method namespace sparsely populated as possible.  Each new object method prevents a column with the same name from using that method name.  L<Rose::DB::Object> tries to keep the list of L<reserved method names|Rose::DB::Object/"RESERVED METHODS"> as small as possible.

Inevitably, classes grow.  It's important for the object manager class to be separate from the object class itself so each class can grow happily in isolation, with no potential clashes.

All of that being said, L<Rose::DB::Object::Manager> does include support for adding manager methods to the object class.  Obviously, this practice is not recommended, but it exists if you really want it.

Anyway, let's see some example.  Making a manager class is simply a matter of inheriting from L<Rose::DB::Object::Manager>, specifying the object class, and then creating a series of appropriately named methods.

    package Product::Manager;

    use Rose::DB::Object::Manager;
    our @ISA = qw(Rose::DB::Object::Manager);

    sub object_class { 'Product' }

    __PACKAGE__->make_manager_methods('products');

The call to L<make_manager_methods()|Rose::DB::Object::Manager/make_manager_methods> creates the following methods:

    get_products
    get_products_iterator
    get_products_count
    delete_products
    update_products

The names are pretty much self-explanatory.  You can read the L<Rose::DB::Object::Manager> documentation for all the gory details.  The important thing to note is that the methods were all named based on the "products" argument to L<make_manager_methods()|Rose::DB::Object::Manager/make_manager_methods>.  You can see how "products" has been incorporated into each of the method names.  Each of these methods is a thin wrapper around the generically-named methods in L<Rose::DB::Object::Manager>.  The wrappers pass the specified object class to the generic methods.

The Perl code for the C<Product::Manager> class shown above can be generated automatically with the L<perl_manager_class|Rose::DB::Object::Metadata/perl_manager_class> method.  The L<make_manager_class|Rose::DB::Object::Metadata/make_manager_class> will both generate the code and L<eval|perlfunc/eval>uate it for you, automating the entire process of creating a manager class from within your L<Rose::DB::Object>-derived class.

    package Product;

    use Rose::DB::Object;
    our @ISA = qw(Rose::DB::Object);
    ...

    # This actually creates the Product::Manager class 
    # as shown in the code sample above.
    __PACKAGE__->meta->make_manager_class('products');

As the comment says, the call to L<make_manager_class|Rose::DB::Object::Metadata/make_manager_class> will create a standalone C<Product::Manager> class in memory.  See the documentation for the L<perl_manager_class|Rose::DB::Object::Metadata/perl_manager_class> and L<make_manager_class|Rose::DB::Object::Metadata/make_manager_class> methods for more information.

If you decide not to heed my advice and create these methods inside your L<Rose::DB::Object>-derived class directly, then just call L<make_manager_methods()|Rose::DB::Object::Manager/make_manager_methods> from within your object class.

    package Product;

    use Rose::DB::Object::Manager;

    use My::DB::Object;
    our @ISA = qw(My::DB::Object);
    ...    
    Rose::DB::Object::Manager->make_manager_methods('products');

This will be the last you see of this technique in this tutorial.  All of the examples will assume that the recommended approach is used instead.

=head4 Fetching objects

The most common task for the manager is fetching multiple objects.  We'll use the C<get_products()> method to do that.  It's based on the L<get_objects()|Rose::DB::Object::Manager/get_objects> method, which takes many parameters.  Most are optional.  In fact, passing no arguments at all will simply fetch every C<Product> object in the database.

    $products = Product::Manager->get_products();

    foreach my $product (@$products)
    {
      print $product->name, "\n";
    }

The return value is a reference to an array in the example above.  A regular array also works.

    @products = Product::Manager->get_products();

Now let's go to the other extreme.

    $products = 
      Product::Manager->get_products(
        query =>
        [
          name => { like => '%Hat' },
          id   => { ge => 7 },
          or   => 
          [
            price => 5.00,
            price => { lt => 10.00 },
          ],
        ],
        sort_by => 'name',
        limit   => 10,
        offset  => 50);

Queries support nested boolean logic and several different kinds of comparison operators.  For a full explanation of all the options, see the L<Rose::DB::Object::Manager> documentation.

The iterator method takes the same kinds of arguments, but returns an iterator that will fetch the objects from the database one at a time.

    $iterator = Product::Manager->get_products_iterator(...);

    while($product = $iterator->next)
    {
      print $product->id, ' ', $product->name, "\n";

      $iterator->finish  if(...);  # exit early?
    }

    print $iterator->total; # total iterated over

=head4 Counting objects

Counting objects is straightforward.  The C<get_products_count()> method takes the same same kinds of arguments as C<get_products()> and C<get_products_iterator()>.  (Noticing a pattern here?)  I returns the count.

    $num_cheap_products = 
      Product::Manager->get_products_count(
        query => [ price => { lt => 1.00 } ]);

=head4 Deleting objects

The C<delete_products()> method accepts the same kinds of C<query> arguments as the manager methods described above, only it uses the parameter name C<where> instead.

    $num_rows_deleted =
      Product::Manager->delete_products(
        where =>
        [
          id    => { ne => 123 },
          name  => { like => 'Wax%' },
        ]);

=head4 Updating objects

The C<update_products()> method accepts the same kinds of arguments as the C<delete_products()> method, plus a C<set> parameter to specify the actual update information.

    $num_rows_updated =
      Product::Manager->update_products(
        set =>
        {
          price => 5.00,
        },
        where =>
        [
          price => 4.99,
          id    => { gt => 100 },
        ]);

=head3 The end of the beginning

This section covers the I<bare minimum> usage and functionality of the L<Rose::DB::Object> module distribution.  Using these features alone, you can automate the basic CRUD operations (Create, Retrieve, Update, and Delete) for single or multiple objects.  But it's almost a shame to stop at this point.  There's a lot more that L<Rose::DB::Object> can do for you.  The "sweet spot" of effort vs. results is much farther along the curve.

In the next section, we will expand upon our C<Product> class and tap more of L<Rose::DB::Object>'s features.

=head2 Mainstream usage

Let's imagine that the C<products> table has expanded.  It now looks like this.

    CREATE TABLE products
    (
      id      SERIAL NOT NULL PRIMARY KEY,
      name    VARCHAR(255) NOT NULL,
      price   DECIMAL(10,2) NOT NULL DEFAULT 0.00,

      status  VARCHAR(128) NOT NULL DEFAULT 'inactive' 
                CHECK(status IN ('inactive', 'active', 'defunct')),

      date_created  TIMESTAMP NOT NULL DEFAULT NOW(),
      release_date  TIMESTAMP,

      UNIQUE(name)
    );

We could do a straightforward expansion of the C<Product> class as designed in the L<previous section|/"Getting started">.

    package Product;

    use My::DB::Object;
    our @ISA = qw(My::DB::Object);

    __PACKAGE__->meta->table('products');
    __PACKAGE__->meta->columns(
      qw(id name price status date_created release_date));
    __PACKAGE__->meta->primary_key_columns('id');
    __PACKAGE__->meta->add_unique_key('name');
    __PACKAGE__->meta->initialize;

But now we're faced with a few problems.  First, while the C<status> column only accepts a few pre-defined values, our C<Product> objects will gladly accept any value.  But maybe that's okay because a exception will be thrown when the object is saved anyway.

The date/time fields are more troubling.  What is the format of a valid value for a TIMESTAMP column in Postgres?  Consulting the documentation will yield the answer, I suppose.  But now all the code that uses C<Product> objects has to be sure to format the C<date_created> and C<release_date> values accordingly.  That's even more difficult if some of those values come from external sources, such as a web form.

Worse, what if we decide to change databases in the future?  We'd have to hunt down every single place where a C<date_created> or C<release_date> value is set and then modify the formatting to match whatever format the new database wants.  Oh, and we'll have to look that up too.  Blah.

Finally, what about all those default values?  The C<price> column already had a default value, but now two more columns also have defaults.  True, the database will take care of this when a row is inserted, but now the Perl object is diverging more and more from the database representation.

Let's solve all of these problems.  If we more accurately describe the columns, L<Rose::DB::Object> will do the rest.

    package Product;

    use My::DB::Object;
    our @ISA = qw(My::DB::Object);

    __PACKAGE__->meta->table('products');

    __PACKAGE__->meta->columns
    (
      id   => { type => 'serial', primary_key => 1, not_null => 1 },
      name => { type => 'varchar', length => 255, not_null => 1 },

      price => 
      {
        type      => 'decimal',
        precision => 10,
        scale     => 2,
        not_null  => 1,
        default   => 0.00 
      },

      status => 
      {
        type     => 'varchar', 
        length   => 128,
        not_null => 1, 
        default  => 'inactive', 
        check_in => [ 'inactive', 'active', 'defunct' ]
      },

      date_created => { type => 'timestamp', not_null => 1, 
                        default => 'now()' },
      release_date => { type => 'timestamp' },
    );

    __PACKAGE__->meta->add_unique_key('name');
    __PACKAGE__->meta->initialize;

Before examining what new functionality this new class gives us, there are a few things to note about the definition.  First, the primary key is no longer specified with the L<primary_key_columns()|Rose::DB::Object::Metadata/primary_key_columns> method.  Instead, the C<id> column has its C<primary_key> attribute set to a true value in its description.

Second, note the default value for the C<date_created> column.  It's the function call C<now()>, which can actualyl only be run within the database.  That's okay, because L<Rose::DB::Object> will pass that value through to the database rather than trying to execute it itself.

In the case of "creation date" columns like this, it's usually better to let the database provide the value as close as possible to the very moment the row is created.  On the other hand, this will mean that any newly created C<Product> object will have a "strange" value for that column (the string "now()") until/unless it is loaded from the database.  It's a trade-off.

Let's see the new C<Product> class in action. The defaults work as expected.

    $p = Product->new;

    print $p->status; # 'inactive'
    print $p->price;  # 0.00

The C<status> method now restricts its input, throwing an exception if the input is invalid.

    $p->status('nonesuch'); # Boom!  Invalid status: 'nonesuch'

The timestamp columns now accept any value that L<Rose::DateTime::Util>'s L<parse_date()|Rose::DateTime::Util/parse_date> method can understand.

    $p->release_date('2005-01-22 18:00:57');
    $p->release_date('12/24/1980 10am');

See the L<Rose::DateTime::Util|Rose::DateTime::Util/parse_date> documentation for a full list of acceptable formats.

Internally, date/time information is stored in L<DateTime> objects.

    $dt = $p->release_date; # DateTime object

Since  L<DateTime> objects can be modified in-place, doing a formerly thorny task like date math is now trivial.

    $p->release_date->add(days => 1);

The C<release_date()> method also accepts a L<DateTime> object as an input, of course:

    $p->release_date(DateTime->new(...));

There are even a few convenience functions triggered by passing a name/value pair.

    # Thursday, December 25th 1980 at 10:00:00 AM
    print $p->release_date(format => '%A, %B %E %Y at %t');

    # Clone the DateTime object, truncate the clone, and return it
    $month_start = $p->release_date(truncate => 'month');

    print $month_start->strftime('%Y-%m-%d'); # 1980-12-01

The upshot is that you no longer have to be concerned about the details of the date/time format(s) understood by the underlying database.  You're also free to use L<DateTime> objects as a convenient interchange format in your code.

This ability isn't just limited to date/time columns.  Any data type that requires special formatting in the database, and/or is more conveniently dealt with as a more "rich" value on the Perl side of the fence (i.e., an object) is fair game for this treatment.

Some other examples include the L<bitfield|Rose::DB::Object::Metadata::Column::Bitfield> column type, which is represented by a L<Bit::Vector> object on the Perl side, and the L<boolean|Rose::DB::Object::Metadata::Column::Boolean> column type which evaluates the "truth" of its arguments and coerces the value accordingly.  As always, values are formatted as required by the particular database.

In some circumstances, L<Rose::DB::Object> can even "fake" a data type for use with a database that does not natively support it.  For example, the L<array|Rose::DB::Object::Metadata::Column::Array> column type is natively supported by Postgres, but it will also work with MySQL using a VARCHAR column type as a stand-in.

Finally, if you're concerned about the performance implications of "inflating" column values from strings and numbers into (relatively) large objects, rest assured that such inflation is only done as needed.  For example, an object with ten date/time columns can be loaded, modified, and saved without ever creating a single L<DateTime> object, provided that none of the date/time columns were among those whose values were modified.

Put another way, the methods that service the columns have an awareness of the producer and consumer of their data.  When data is coming from the database, the column methods accept it as-is.  When data is being sent to the database, it is formatted appropriately, if necessary.  If a column value was not modified since it was loaded from the database, then the value that was loaded is simply returned as-is.  In this way, data can make a round-trip without ever being inflated, deflated, or formatted.

This behavior is not a requirement of all column methods, but it is a recommended practice--one followed by all the column classes that are part of the L<Rose::DB::Object> distribution.

=head2 Auto-initialization and the convention manager

The C<Product> class set up in the previous section is useful, but it also takes significantly more typing to set up.  Over the long term, it's still a clear win.  On the other hand, a lot of the details in the column descriptions are already known by the database: column types, default values, maximum lengths, etc.  It would be handy if we could ask the database for this information instead of looking it up and typing it in manually.

This process of interrogating the database in order to extract metadata is called "auto-initialization."  There's an L<entire section|Rose::DB::Object::Metadata/"AUTO-INITIALIZATION"> of the L<Rose::DB::Object::Metadata> documentation dedicated to the topic.  The executive summary is that auto-initialization saves work in the short-run, but at the cost of some long-term costs.  Read the L<friendly manual|Rose::DB::Object::Metadata/"AUTO-INITIALIZATION"> for the details.  For the purposes of this tutorial, I will simply demonstrate the features, culminating in the suggested best practice.

Let's start by applying auto-initialization to the C<Product> class.

    package Product;

    use My::DB::Object;
    our @ISA = qw(My::DB::Object);

    __PACKAGE__->meta->table('products');
    __PACKAGE__->meta->auto_initialize;

Believe it or not, that class is equivalent to the previous incarnation, right down to the details of the columns and the unique key.  As long as the table is specified, L<Rose::DB::Object> will dig all the rest of the information out of the database.  Handy!

In fact, that class can be shortened even further with the help of the L<convention manager|Rose::DB::Object::ConventionManager>.

    package Product;

    use My::DB::Object;
    our @ISA = qw(My::DB::Object);

    __PACKAGE__->meta->auto_initialize;

Now even the table is left unspecified.  How does L<Rose::DB::Object> know what to do in this case?  Why, by convention, of course.  The default convention manager dictates that class names are singular and title-cased and their corresponding table names are lowercase and plural.  Thus, the omitted table name in the C<Product> class is, by convention, assumed to be named "products".

Like auto-initialization, convention managers are handy, but may also present some maintenance issues.  I tend to favor a more explicitly approach, but I can also imagine scenarios where the convention manager is a good fit.  Keep in mind that customized convention managers are possible, allowing individual organizations or projects to define their own conventions.  You can read all about it in the L<Rose::DB::Object::ConventionManager> documentation.

Anyway, back to auto-initialization.  Yes, L<auto_initialize()|Rose::DB::Object::Metadata/auto_initialize> will dig out all sorts of interesting and important information for you.  Unfortunately, it will dig that information out I<every single time the class is loaded>.  Worse, this class will fail to load at all if a database connection is not immediately available.

Auto-initialization seems like something that is best done only once, with the results being saved in a more conventional form.  That's just what L<Rose::DB::Object::Metadata>'s L<code generation|Rose::DB::Object::Metadata/"Code Generation"> functions are designed to do.  The C<perl_*> family of methods can generate snippets of Perl code, or even entire classes, based on the results of the auto-initialization process.  They'll even honor some basic code formatting directives.

    package Product;

    use My::DB::Object;
    our @ISA = qw(My::DB::Object);

    __PACKAGE__->meta->table('products');
    __PACKAGE__->meta->auto_initialize;

    print __PACKAGE__->meta->perl_class_definition(indent => 2,
                                                   braces => 'bsd');

Here's the output of that print statement.  A few long lines were manually wrapped, but it's otherwise unmodified.

  package Product;

  use strict;

  use My::DB::Object
  our @ISA = qw(My::DB::Object);

  __PACKAGE__->meta->table('products');

  __PACKAGE__->meta->columns
  (
    id           => { type => 'integer', not_null => 1 },
    name         => { type => 'varchar', length => 255, not_null => 1 },
    price        => { type => 'numeric', default => '0.00', 
                      not_null => 1, precision => 2, scale => 10 },
    vendor_id    => { type => 'integer' },
    status       => { type => 'varchar', default => 'inactive', 
                      length => 128, not_null => 1 },
    date_created => { type => 'timestamp', default => 'now()', 
                      not_null => 1 },
    release_date => { type => 'timestamp' },
  );

  __PACKAGE__->meta->primary_key_columns([ 'id' ]);

  __PACKAGE__->meta->add_unique_keys([ 'name' ]);

  __PACKAGE__->meta->initialize;

  1;

Copy and paste that output back into the "Product.pm" file and you're in business.

The door is open to further automation through scripts that call the methods demonstrated above.  Although it's my inclination to work towards a static, explicit type of class definition, the tools are there for those who prefer a more dynamic approach.

=head2 Foreign keys

When a column in one table references a row in another table, the referring table is said to have a "foreign key."  As with primary and unique keys, L<Rose::DB::Object> supports foreign keys made up of more than one column.

In the context of L<Rose::DB::Object>, a foreign key is a database-supported construct that ensures that any non-null value in a foreign key column actually refers to an existing row in the foreign table.  Databases that enforce this constraint are said to support "referential integrity."  Foreign keys are only applicable to L<Rose::DB::Object>-derived classes when the underlying database supports "native" foreign keys and enforces referential integrity.

While it's possible to define foreign keys in an L<Rose::DB::Object>-derived class even if there is no support for them in the database, this is considered bad practice.  If you're just trying to express some sort of relationship between two tables, there's a more appropriate way to do so. (More on that in the L<next section|/Relationships>.)

Let's add a foreign key to the C<products> table.  First, we'll need to create the table that the foreign key will reference.

    CREATE TABLE vendors
    (
      id    SERIAL NOT NULL PRIMARY KEY,
      name  VARCHAR(255) NOT NULL,

      UNIQUE(name)
    );

When dealing with any kind of inter-table relationship, L<Rose::DB::Object> requires a L<Rose::DB::Object>-derived class fronting each participating table.  So we need a class for the C<vendors> table.

    package Vendor;  

    use My::DB::Object
    our @ISA = qw(My::DB::Object);

    __PACKAGE__->meta->table('vendors');
    __PACKAGE__->meta->columns
    (
      id   => { type => 'serial', primary_key => 1, not_null => 1 },
      name => { type => 'varchar', length => 255, not_null => 1 },
    );

    __PACKAGE__->meta->add_unique_key('name');
    __PACKAGE__->meta->initialize;

Now we'll add the foreign key to our ever-growing C<products> table.

    CREATE TABLE products
    (
      id      SERIAL NOT NULL PRIMARY KEY,
      name    VARCHAR(255) NOT NULL,
      price   DECIMAL(10,2) NOT NULL DEFAULT 0.00,

      vendor_id  INT REFERENCES vendors (id),

      status  VARCHAR(128) NOT NULL DEFAULT 'inactive' 
                CHECK(status IN ('inactive', 'active', 'defunct')),

      date_created  TIMESTAMP NOT NULL DEFAULT NOW(),
      release_date  TIMESTAMP,

      UNIQUE(name)
    );

Finally, here's how the foreign key definition looks in the Perl class.

    package Product;  

    use My::DB::Object
    our @ISA = qw(My::DB::Object);

    use Vendor;

    __PACKAGE__->meta->table('products');

    __PACKAGE__->meta->columns
    (
      id           => { type => 'integer', not_null => 1 },
      name         => { type => 'varchar', length => 255, not_null =>1 },
      price        => { type => 'numeric', default => '0.00', 
                        not_null => 1, precision => 2, scale => 10 },
      vendor_id    => { type => 'int' },
      status       => { type => 'varchar', default => 'inactive', 
                        length => 128, not_null => 1 },
      date_created => { type => 'timestamp', not_null => 1, 
                        default => 'now()' },
      release_date => { type => 'timestamp' },
    );

    __PACKAGE__->meta->primary_key_columns('id');
    __PACKAGE__->meta->add_unique_key('name');

    __PACKAGE__->meta->foreign_keys
    (
      vendor =>
      {
        class       => 'Vendor',
        key_columns => { vendor_id => 'id' },
      },
    );

    __PACKAGE__->meta->initialize;

First, notice that the C<Vendor> class is loaded.  This is important.  A foreign key cannot be defined unless the L<Rose::DB::Object>-derived class that fronts the foreign table is also loaded.  The auto-initialization process will try to load such classes for you, but the "manual" approach shown above will not.  As usual, I prefer the more explicit approach.

(It's also a good idea to load foreign classes only after establishing the current base class.  In the code above, note that C<@ISA> is set before the C<Vendor> class is loaded.)

Next, note that a C<vendor_id> column is added to the column list.  This needs to be done independently of any foreign key definition.  It's a new column, so it needs to be in the column list.  There's nothing more to it than that.

Finally, there's the foreign key definition itself.  The name/hashref-value pair passed to the L<foreign_keys()|Rose::DB::Object::Metadata/foreign_keys> method is (roughly) shorthand for this.

    Rose::DB::Object::Metadata::ForeignKey->new(
      name        => 'vendor',
      class       => 'Vendor',
      key_columns => { vendor_id => 'id' });

In other words, C<vendor> is the name of the foreign key, and the rest of the information is used to set attributes on the L<foreign key object|Rose::DB::Object::Metadata::ForeignKey>.  You could, in fact, construct your own foreign key objects and pass them to  L<foreign_keys()|Rose::DB::Object::Metadata/foreign_keys> (or  L<add_foreign_keys()|Rose::DB::Object::Metadata/add_foreign_keys>, etc.) but that would require even more typing.

Going in the other direction, since our class and column names match up with what the convention manager expects, we could actually shorten the code to this.

    __PACKAGE__->meta->foreign_keys('vendor');

Given only a foreign key name, the convention manager will derive the C<Vendor> class name and will find the C<vendor_id> column in the C<Product> class and match it up to the primary key of the C<vendors> table.  As with most things in L<Rose::DB::Object> class setup, you can be as explicit or as terse as you feel comfortable with, depending on how closely you conform to the expected conventions.

So, what does this new C<vendor> foreign key do for us?  Let's add some data and see.  Imagine the following two 

    $v = Vendor->new(name => 'Acme')->save;
    $p = Product->new(name => 'Kite')->save;

Note the idiomatic way to create and then save an object in "one step."  This is possible because both the L<new|Rose::DB::Object/new> and L<save|Rose::DB::Object/save> methods return the object itself.  Anyway, let's link the two objects.  One way to do it is to set the column values directly.

    $p->vendor_id($v->id);
    $p->save;

To use this technique, we must know which columns link to each other, of course.  But it works.  We can see this by calling the method named after the foreign key itself: C<vendor()>.

    $v = $p->vendor; # Vendor object
    print $v->name;  # "Acme"

The C<vendor()> method can be used to link the two objects as well.  Let's start over and try it that way:

    $v = Vendor->new(name => 'Smith')->save;
    $p = Product->new(name => 'Knife')->save;

    $p->vendor($v);
    $p->save;    

    print $p->vendor->name; # "Smith"

The C<vendor()> method actually takes several different kinds of arguments.  A C<Vendor> object was passed above, but other formats are possible.  Imagine a new product also made by Smith.

    $p = Product->new(name => 'Rope')->save;
    $p->vendor(name => 'Smith');
    $p->save;

Here the arguments passed to the C<vendor()> method are name/value pairs which will be used to construct the appropriate C<Vendor> object.  Since C<name> is a unique key in the C<vendors> table, the C<Vendor> class can look up the existing vendor named "Smith" and assign it to the "Rope" product.

If no vendor named "Smith" existed, one would have been created when the product was saved.  In this case, the save process would take place within a transaction (assuming the database supports transactions) to ensure that both the product and vendor are created successfully, or neither is.

The name/value pairs can also be provided in a reference to a hash.

    $p = Product->new(name => 'Rope')->save;
    $p->vendor({ name => 'Smith' });
    $p->save;

Here's yet another argument format.  Imagine that the "Acme" vendor id is 1.

    $p = Product->new(name => 'Crate')->save;
    $p->vendor(1);
    $p->save;

    print $p->vendor->name; # "Acme"

Like the name/value pair argument format, a primary key value will be used to construct the appropriate object.  (This only works if the foreign table has a single-column primary key, of course.)  And like before, if such an object doesn't exist, it will be created.  But in this case, if no existing vendor object had an C<id> of 1, the attempt to create one would have failed because the C<name> column would have been null.

To summarize, the foreign key method can take arguments in these forms.

=over 4

=item * An object of the appropriate class.

=item * Name/value pairs used to construct such an object.

=item * A reference to a hash containing name/value pairs used to construct such an object.

=item * A primary key value (but only if the foreign table has a single-column primary key).

=back

In each case, the foreign object will be added to the database it if does not already exist there.  This all happens when the "parent" (C<Product>) object is saved.  Until then, nothing is stored in the database.

There's also another method created in response to the foreign key definition.  This one allows the foreign object to be deleted from the database.

    print $p->vendor->name; # "Acme"
    $p->delete_vendor();
    $p->save; # The "Acme" vendor is deleted from the vendors table

Again, the actual database modification takes place when the parent object is saved.  Note that this operation will fail if any other rows in the C<products> table still reference the Acme vendor.  And again, since this all takes place within a transaction (where supported), the entire operation will fail or succeed as a single unit.

Finally, if we want to simply disassociate a product from its vendor, we can simply set the vendor to undef.

    $p->vendor(undef); # This product has no vendor
    $p->save;

Setting the C<vendor_id> column directly has the same effect, of course.

    $p->vendor_id(undef); # set vendor_id = NULL
    $p->save;

Before moving on to the next section, here's a brief note about auto-initialization and foreign keys.  Since foreign keys are a construct of the database itself, the auto-initialization process can actually discover them and create the appropriate foreign key metadata.

Since all of the column and table names are still in sync with the expected conventions, the C<Product> class can still be defined like this:

    package Product;

    use My::DB::Object;
    our @ISA = qw(My::DB::Object);

    __PACKAGE__->meta->auto_initialize;

while retaining all of the abilities demonstrated above.

The L<perl_class_definition()|Rose::DB::Object::Metadata/perl_class_definition> method will produce the appropriate foreign key definitions, as expected.

    package Product;

    use My::DB::Object;
    our @ISA = qw(My::DB::Object);

    __PACKAGE__->meta->auto_initialize;

    print __PACKAGE__->meta->perl_class_definition(indent => 2,
                                                   braces => 'bsd');

Here's the output.

  package Product;

  use strict;

  use My::DB::Object
  our @ISA = qw(My::DB::Object);

  __PACKAGE__->meta->table('products');

  __PACKAGE__->meta->columns
  (
    id           => { type => 'integer', not_null => 1 },
    name         => { type => 'varchar', length => 255, not_null => 1 },
    price        => { type => 'numeric', default => '0.00', not_null => 1,
                      precision => 2, scale => 10 },
    vendor_id    => { type => 'integer' },
    status       => { type => 'varchar', default => 'inactive', 
                      length => 128, not_null => 1 },
    date_created => { type => 'timestamp', default => 'now()', 
                      not_null => 1 },
    release_date => { type => 'timestamp' },
  );

  __PACKAGE__->meta->primary_key_columns([ 'id' ]);

  __PACKAGE__->meta->add_unique_keys([ 'name' ]);

  __PACKAGE__->meta->foreign_keys
  (
    vendor => 
    {
      class => 'Vendor',
      key_columns => 
      {
        vendor_id => 'id',
      },
    },
  );

  __PACKAGE__->meta->initialize;

=head2 Relationships

=head3 "one to one" and "many to one" relationships

Foreign keys are a database-native representation of a specific kind of inter-table relationship.  This concept can be further generalized to encompass other kinds of relationships as well.  But before we delve into that, let's consider the kind of relationship that a foreign key represents.

In the product and vendor example in the L<previous section|/"Foreign keys">, each product has one vendor.  (Actually it can have zero or one vendor, since the C<vendor_id> column allows NULL values.  But for now, we'll leave that aside.)

When viewed in terms of the participating tables, things look slightly different.  Earlier, we established that several products can have the same vendor.  So the inter-table relationship is actually this: many rows from the C<products> table may refer to one row from the C<vendors> table.  

L<Rose::DB::Object> describes inter-table relationships from the perspective of a given table by using the cardinality of the "local" table (C<products>) followed by the cardinality of the "remote" table (C<vendors>).  The foreign key in the C<products> table (and C<Product> class) therefore represents a "B<many to one>" relationship.

If the relationship were different and each vendor was only allowed to have a single product, then the relationship would be "one to one."  Given only the foreign key definition as it exists in the database, it's not possible to determine whether the relationship is "many to one" or "one to one."  The default is "many to one" because that's the less restrictive choice.

To override the default, a relationship type string can be included in the foreign description.

    __PACKAGE__->meta->foreign_keys
    (
      vendor =>
      {
        class       => 'Vendor',
        key_columns => { vendor_id => 'id' },
        relationship_type => 'one to one',
      },
    );

(The C<relationship_type> parameter may be shortened to C<rel_type>, if desired.)

L<Rose::DB::Object> generalizes all inter-table relationships using a family of aptly named relationship objects.  Each inherits from the L<Rose::DB::Object::Metadata::Relationship> base class.

Even foreign keys are included under the umbrella of this concept.  When foreign key metadata is added to a L<Rose::DB::Object>-derived class, a corresponding "many to one" or "one to one" relationship is actually added as well.  This relationship is simply a proxy for the foreign key.  It exists so that the set of relationship objects encompasses all relationships, even those that correspond to foreign keys in the database.  This makes iterating over all relationships in a class a simple affair.

    foreach my $rel (Product->meta->relationships)
    {
      print $rel->name, ': ', $rel->type, "\n";
    }

For the C<Product> class, the output is:

    vendor: many to one

Given the two possible cardinalities, "many" and "one", it's easy to come up with a list of all possible inter-table relationships.  Here they are, listed with their corresponding relationship object classes.

    one to one   - Rose::DB::Object::Metadata::Relationship::OneToOne
    one to many  - Rose::DB::Object::Metadata::Relationship::OneToMany
    many to one  - Rose::DB::Object::Metadata::Relationship::ManyToOne
    many to many - Rose::DB::Object::Metadata::Relationship::ManyToMany

We've already seen that "one to one" and "many to one" relationships can be represented by foreign keys in the database, but that's not a requirement.  It's perfectly possible to have either of those two kinds of relationships in a database that has no native support for foreign keys.  MySQL using the MyISAM  storage engine is a common example.

If you find yourself using such a database, there's no reason to lie to your Perl classes by adding foreign key metadata.  Instead, simple add a relationship.

Here's an example of our C<Product> class as it might exist on a database that does not support foreign keys.  (The C<Product> class is getting larger now, so previously established portions may be omitted from now on.)

    package Product;  

    use My::DB::Object
    our @ISA = qw(My::DB::Object);

    use Vendor;

    __PACKAGE__->meta->table('products');
    __PACKAGE__->meta->columns(...);
    __PACKAGE__->meta->primary_key_columns('id');
    __PACKAGE__->meta->add_unique_key('name');

    __PACKAGE__->meta->relationships
    (
      vendor =>
      {
        type       => 'many to one',
        class      => 'Vendor',
        column_map => { vendor_id => 'id' },
      },
    );

    __PACKAGE__->meta->initialize;

They syntax and semantics are similar to those L<described|/"Foreign keys"> for foreign keys.  The only slight differences are the names and types of parameters accepted by relationship objects.

In the example above, a "many to one" relationship named "vendor" is set up.  As demonstrated before, this definition can be reduced much further, allowing the convention manager to fill in the details.  But unlike the case with the foreign key definition, where only the name was supplied, we must provide the relationship type as well. 

  __PACKAGE__->meta->relationships(vendor => { type => 'many to one' });

There's an even more convenient shorthand for that:

  __PACKAGE__->meta->relationships(vendor => 'many to one');

(Again, this all depends on naming the tables, classes, and columns in accordance with the expectations of the L<convention manager|Rose::DB::Object::Metadata/convention_manager>.)  The resulting C<vendor()> and C<delete_vendor()> methods behave exactly the same as the methods created on behalf of the foreign key definition.

=head3 "one to many" relationships

Now let's explore the other two method types.  We'll start with "one to many" by adding region-specific pricing to our products.  First, we'll need a C<prices> table.

    CREATE TABLE prices
    (
      id          SERIAL NOT NULL PRIMARY KEY,
      product_id  INT NOT NULL REFERENCES products (id),
      region      CHAR(2) NOT NULL DEFAULT 'US',
      price       DECIMAL(10,2) NOT NULL DEFAULT 0.00,

      UNIQUE(product_id, region)
    );

This table needs a corresponding L<Rose::DB::Object>-derived class, of course.

    package Price;

    use My::DB::Object;
    our @ISA = qw(My::DB::Object);

    use Product;

    __PACKAGE__->meta->table('prices');

    __PACKAGE__->meta->columns
    (
      id         => { type => 'serial', not_null => 1 },
      product_id => { type => 'int', not_null => 1 },
      region     => { type => 'char', length => 2, not_null => 1 },
      price => 
      {
        type      => 'decimal',
        precision => 10,
        scale     => 2,
        not_null  => 1,
        default   => 0.00 
      },
    );

    __PACKAGE__->meta->primary_key_columns('id');
    __PACKAGE__->meta->add_unique_key([ 'product_id', 'region' ]);

    __PACKAGE__->meta->foreign_keys
    (
      product =>
      {
        class       => 'Product',
        key_columns => { product_id => 'id' },
      },
    );

    __PACKAGE__->meta->initialize;

The C<price> column can be removed from the C<products> table.

    ALTER TABLE products DROP COLUMN price;

Finally, the C<Product> class needs to be modified.

    package Product;  

    use My::DB::Object
    our @ISA = qw(My::DB::Object);

    use Price;
    use Vendor;

    __PACKAGE__->meta->table('products');
    __PACKAGE__->meta->columns(...);
    __PACKAGE__->meta->primary_key_columns('id');
    __PACKAGE__->meta->add_unique_key('name');

    __PACKAGE__->meta->foreign_keys
    (
      vendor =>
      {
        class       => 'Vendor',
        key_columns => { vendor_id => 'id' },
      },
    );

    __PACKAGE__->meta->relationships
    (
      prices =>
      {
        type       => 'one to many',
        class      => 'Price',
        column_map => { id => 'product_id' },
      },
    );

    __PACKAGE__->meta->initialize;

Note that both the L<column map|Rose::DB::Object::Metadata::Relationship::OneToMany/column_map> for the "one to many" relationship and the L<key columns|Rose::DB::Object::Metadata::ForeignKey/key_columns> for the foreign key map from "local" columns to "foreign" columns.

The C<vendor_id> column in the local table (C<products>) is connected to the C<id> column in the foreign table (C<vendors>).

    key_columns => { vendor_id => 'id' },

The C<id> column in the local table (C<products>) is connected to the C<product_id> column in the foreign table (C<prices>).

    column_map => { id => 'product_id' },

This is all from the perspective of the class in which the definitions appear.  Note that things are reversed in the C<Price> class.

    package Price;
    ...
    __PACKAGE__->meta->foreign_keys
    (
      product =>
      {
        class       => 'Product',
        key_columns => { product_id => 'id' },
      },
    );

Here, the C<product_id> column in the local table (C<prices>) is connected to the C<id> column in the foreign table (C<products>).

The methods created by "... to many" relationships behave much like their "... to one" and foreign key counterparts.  The main difference is that lists or references to arrays of the L<previously described|/"Foreign keys"> argument formats are also acceptable, while name/value pairs outside of a hashref are not.

Here's a list of argument types accepted by "many to one" methods like C<prices>.

=over 4

=item * A list or reference to an array of objects of the appropriate class.

=item * A list or reference to an array of hash references containing name/value pairs used to construct such an object.

=item * A list or reference to an array of primary key values (but only if the foreign table has a single-column primary key).

=back

Setting a new list of prices will delete all the old prices.  As with foreign keys, any actual database modification happens when the parent object is saved.  here are some examples.

    $p = Product->new(name => 'Kite');
    $p->prices({ price => 1.23, region => 'US' },
               { price => 4.56, region => 'UK' });

    $p->save; # database is modified here

    # US: 1.23
    # UK: 4.56
    print join("\n", map { $_->region . ': ' . $_->price } $p->prices);

=head3 Cascading delete

Deleting a product now becomes slightly more interesting.  The naive approach fails.

    $p->delete; # Fatal error!

    # DBD::Pg::st execute failed: ERROR:  update or delete on "products"
    # violates foreign key constraint "prices_product_id_fkey" on
    # "prices"
    # DETAIL:  Key (id)=(12345) is still referenced from table "prices".

Since rows in the C<prices> table now link to rows in the C<products> table, a product cannot be deleted until all of the prices that refer to it are also deleted.  There are a few ways to deal with this.

The best solution is to add a trigger to the C<products> table itself in the database that makes sure to delete any associated prices before deleting a product.  This change will allow the naive approach shown above to work correctly.

A less robust solution is necessary if your database does not support triggers.  One such solution is to manually delete the prices before deleting the product.  This can be done in several ways.  The prices can be deleted directly, like this.

    foreach my $price ($p->prices)
    {
      $price->delete; # Delete all associated prices
    }

    $p->delete; # Now it's safe to delete the product

The list or prices for the product can also be set to an empty list, which will have the effect of deleting all associated prices when the product is saved.

    $p->prices([]);
    $p->save;   # All associated prices deleted here
    $p->delete; # Now it's safe to delete the product

Finally, the L<delete()|Rose::DB::Object/delete> method can actually automate this process, and do it all inside a transaction to boot.

    $p->delete(cascade => 1); # Delete all associated rows too

Again, the recommended approach is to use triggers inside the database itself.  But if necessary, these other approaches will work too.

=head3 "many to many" relationships

The final relationship type is the most complex.  In a "many to many" relationship, a single row in table A may be related to multiple rows in table B, while a single row in table B may alos be related to multiple rows in table A.  (Confused?  A concrete example will follow shortly.)

This kind of relationship involves three tables instead of just two.  The "local" and "foreign" tables, familiar from the other relationship types described above, still exist, but now there's a third table that connects rows from those two tables.  This third table is called the "mapping table," and the L<Rose::DB::Object>-derived class that fronts it is called the "map class."

Let's add such a relationship to our growing family of classes.  Imagine that each product may come in several colors.    Right away, both the "one to one" oand "many to one" relationship types are eliminated since they can only provide a single color for any given product.  A "one to many" relationship may seem suitable, since one product may have many colors.  But such a relationship is wasteful.  Let's see why.  Imagine a C<colors> table like this.

    CREATE TABLE colors
    (
      id            SERIAL NOT NULL PRIMARY KEY,
      name          VARCHAR(255) NOT NULL,
      product_id    INT NOT NULL REFERENCES products (id)
    );

Here's a simple C<Color> class to front it.

    package Color;  

    use My::DB::Object
    our @ISA = qw(My::DB::Object);

    use Product;

    __PACKAGE__->meta->table('colors');
    __PACKAGE__->meta->columns
    (
      id   => { type => 'serial', primary_key => 1, not_null => 1 },
      name => { type => 'varchar', length => 255, not_null => 1 },
      product_id => { type => 'int', not_null => 1 },
    );

    __PACKAGE__->meta->foreign_keys
    (
      product =>
      {
        class       => 'Product',
        key_columns => { product_id => 'id' },
      },
    );

    __PACKAGE__->meta->initialize;

Finally, let's add the the "one to many" relationship to the C<Product> class.


    package Product;  

    use Color;
    ...
    __PACKAGE__->meta->relationships
    (
      ...
      colors =>
      {
        type       => 'one to many',
        class      => 'Color',
        column_map => { id => 'product_id' },
      },
    );

    __PACKAGE__->meta->initialize;

It works as expected.

    $p1 = Product->new(id     => 10, 
                       name   => 'Sled', 
                       colors => 
                       [ 
                         { name => 'red'   }, 
                         { name => 'green' } 
                       ]);
    $p1->save;

    $p2 = Product->new(id     => 20, 
                       name   => 'Kite', 
                       colors => 
                       [ 
                         { name => 'blue'  }, 
                         { name => 'green' }, 
                         { name => 'red'   }, 
                       ]);
    $p2->save;

But now look at the contents of the <colors> table in the database.

    mydb=# select * from colors;

     id | name  | product_id 
    ----+-------+------------
      1 | red   |         10
      2 | green |         10
      3 | blue  |         20
      4 | green |         20
      5 | red   |         20

Notice that the colors "green" and "red" appear twice.  Now imagine that there are 50,000 products.  What are the odds that there will be more than a few colors in common among them?

This is a poor database design.  To fix it, we must recognize that colors will be shared among products, since the set of possible colors is relatively small compared to the set of possible products.  One product may have many colors, but one color may also beong to many products.  And there you have it: a textbook "many to many" relationship.

Let's redesign this relationship, starting with a new version of the C<colors> table.

    CREATE TABLE colors
    (
      id    SERIAL NOT NULL PRIMARY KEY,
      name  VARCHAR(255) NOT NULL,

      UNIQUE(name)
    );

Since each color will now appear only once in this table, we can make the C<name> column a unique key.

Here's the new C<Color> class.

    package Color;  

    use My::DB::Object
    our @ISA = qw(My::DB::Object);

    __PACKAGE__->meta->table('colors');
    __PACKAGE__->meta->columns
    (
      id   => { type => 'serial', primary_key => 1, not_null => 1 },
      name => { type => 'varchar', length => 255, not_null => 1 },
    );

    __PACKAGE__->meta->add_unique_key('name');
    __PACKAGE__->meta->initialize;

Since the C<colors> table no longer has a foreign key that points to the C<products> table, we need some way to connect the two tables: a mapping table.

    CREATE TABLE product_color_map
    (
      product_id  INT NOT NULL REFERENCES products (id),
      color_id    INT NOT NULL REFERENCES colors (id),

      PRIMARY KEY(product_id, color_id)
    );

Note that there's no reaosn for a separate primary key column in this table.  We'll use a two-column primary key instead.

Here's the map class.

    package ProductColorMap;  

    use My::DB::Object
    our @ISA = qw(My::DB::Object);

    use Product;
    use Color;

    __PACKAGE__->meta->table('product_color_map');
    __PACKAGE__->meta->columns
    (
      product_id => { type => 'int', not_null => 1 },
      color_id   => { type => 'int', not_null => 1 },
    );

    __PACKAGE__->meta->primary_key_columns(qw(product_id color_id));

    __PACKAGE__->meta->foreign_keys
    (
      product =>
      {
        class       => 'Product',
        key_columns => { product_id => 'id' },
      },

      color =>
      {
        class       => 'Color',
        key_columns => { color_id => 'id' },
      },
    );

    __PACKAGE__->meta->initialize;

It's important that the map class have either a foreign key or a "many to one" relationship pointing to each of the tables that it maps between.  In this case, there are two foreign keys.  Also note that both foreign classes, C<Product> and C<Color>, must be loaded by the map class.

Finally, here's the "many to many" relationship definition in the C<Product> class.

    package Product;  

    use ProductColorMap;
    ...
    __PACKAGE__->meta->relationships
    (
      ...
      colors =>
      {
        type      => 'many to many',
        map_class => 'ProductColorMap'
        map_from  => 'product',
        map_to    => 'color',
      },
    );

    __PACKAGE__->meta->initialize;

Note that only the map class needs to be C<use>d in the C<Product> class.  The relationship definition specifies the name of the map class, and (optionally) the names of the foreign keys or "one to one" relationships in the map class that connect the two tables.  In most cases, these two parameters (C<map_from> and C<map_to>) are unnecessary.  L<Rose::DB::Object> will figure out what to do given only the map class, so long as there's no ambiguity in the mapping table.

In this case, there is no ambiguity, so the relationship definition can be shortened to this.


    use ProductColorMap;
    ...
    __PACKAGE__->meta->relationships
    (
      ...
      colors =>
      {
        type      => 'many to many',
        map_class => 'ProductColorMap'
      },
    );

In fact, since the map table is named according to the default L<conventions|Rose::DB::Object::ConventionManager>, it can be shortened even further.

    use ProductColorMap;
    ...
    __PACKAGE__->meta->relationships
    (
      ...
      colors => { type => 'many to many' },
    );

And further still:

    use ProductColorMap;
    ...
    __PACKAGE__->meta->relationships
    (
      ...
      colors => 'many to many',
    );

(Classes can be L<shortened even more absurdly|Rose::DB::Object::Metadata/"AUTO-INITIALIZATION"> when auto-initialization is combined with the convention manager.  See the L<convention manager documentation|Rose::DB::Object::Metadata/"AUTO-INITIALIZATION"> for an example.)

Now let's revisit the example code.

    $p1 = Product->new(id     => 10, 
                       name   => 'Sled', 
                       colors => 
                       [ 
                         { name => 'red'   }, 
                         { name => 'green' } 
                       ]);
    $p1->save;

    $p2 = Product->new(id     => 20, 
                       name   => 'Kite', 
                       colors => 
                       [ 
                         { name => 'blue'  }, 
                         { name => 'green' }, 
                         { name => 'red'   }, 
                       ]);
    $p2->save;

The database now looks much nicer.

    mydb=# select * from colors;

     id | name  
    ----+-------
      1 | red
      2 | green
      3 | blue


    mydb=# select * from product_color_map; 

     product_id | color_id 
    ------------+----------
             10 |        1
             10 |        2
             20 |        3
             20 |        2
             20 |        1

Each color appears only once, and the mapping table handles all the connections between the C<colors> and <products> tables.

The "many to many" C<colors> method works much like the "one to many "C<prices> method described earlier.  The valid argument formats are the same.

=over 4

=item * A list or reference to an array of objects of the appropriate class.

=item * A list or reference to an array of hash references containing name/value pairs used to construct such an object.

=item * A list or reference to an array of primary key values (but only if the foreign table has a single-column primary key).

=back

The database modification behavior is also the same, with changes happening when the "parent" object is saved.

    $p = Product->new(id => 123)->load;

    $p->colors({ name => 'green' },
               { name => 'blue'  });

    $p->save; # database is modified here

Setting the list of colors replaces the old list, but in the case of a "many to many" relationship, only the map records are deleted.

    $p = Product->new(id => 123)->load;

    $p->colors({ name => 'pink'   },
               { name => 'orange' });

    # Delete old rows in the mapping table and create new ones
    $p->save; 

Passing a reference to an empty array will remve all colors associated with a particular product by deleting all its mapping table entries.

    $p->colors([]);
    $p->save; # all mapping table entries deleted

Finally, the same caveats L<described earlier|/"Cascading delete"> about deleting products that have associated prices apply to colors as well.  Again, I recommend using a trigger in the database to handle this, but L<Rose::DB::Object>'s cascading delete feature will work in a pinch.

    # Delete all associated rows in the prices table, plus any
    # rows in the product_color_map table, before deleting the
    # row in the products table.
    $p->delete(cascade => 1);

=head3 Relationship code summary

To summarize this exploration of inter-table relationships, here's a terse summary of the current state of our Perl classses, and the assocaited database tables.

In the Perl code below, I've switched to using the L<base> module to specify the base class inheritence.  I've done this for the sake of brevity, but also to show that it works just a swell as seting C<@ISA> directly.

For similar reasons, I've also chosen to use the shorter versions of the foreign key and relationship definitions in the Perl classes.  Just remember that this only works when your tables, columns, and classes are named according to the expected L<conventions|Rose::DB::Object::ConventionManager>.

First, the database schema.

    CREATE TABLE vendors
    (
      id    SERIAL NOT NULL PRIMARY KEY,
      name  VARCHAR(255) NOT NULL,

      UNIQUE(name)
    );

    CREATE TABLE products
    (
      id      SERIAL NOT NULL PRIMARY KEY,
      name    VARCHAR(255) NOT NULL,
      price   DECIMAL(10,2) NOT NULL DEFAULT 0.00,

      vendor_id  INT REFERENCES vendors (id),

      status  VARCHAR(128) NOT NULL DEFAULT 'inactive' 
                CHECK(status IN ('inactive', 'active', 'defunct')),

      date_created  TIMESTAMP NOT NULL DEFAULT NOW(),
      release_date  TIMESTAMP,

      UNIQUE(name)
    );

    CREATE TABLE prices
    (
      id          SERIAL NOT NULL PRIMARY KEY,
      product_id  INT NOT NULL REFERENCES products (id),
      region      CHAR(2) NOT NULL DEFAULT 'US',
      price       DECIMAL(10,2) NOT NULL DEFAULT 0.00,

      UNIQUE(product_id, region)
    );

    CREATE TABLE colors
    (
      id    SERIAL NOT NULL PRIMARY KEY,
      name  VARCHAR(255) NOT NULL,

      UNIQUE(name)
    );

    CREATE TABLE product_color_map
    (
      product_id  INT NOT NULL REFERENCES products (id),
      color_id    INT NOT NULL REFERENCES colors (id),

      PRIMARY KEY(product_id, color_id)
    );

Now the Perl classes.  Remember that these must each be in their own ".pm" files, despite appearing in one contiguous code snippet below.

  package Vendor;

  use base 'My::DB::Object';

  __PACKAGE__->meta->table('vendors');
  __PACKAGE__->meta->columns
  (
    id   => { type => 'serial', primary_key => 1, not_null => 1 },
    name => { type => 'varchar', length => 255, not_null => 1 },
  );

  __PACKAGE__->meta->add_unique_key('name');
  __PACKAGE__->meta->initialize;

  1;


  package Product;

  use Price;
  use Vendor;
  use ProductColorMap;

  use base 'My::DB::Object';

  __PACKAGE__->meta->table('products');

  __PACKAGE__->meta->columns
  (
    id           => { type => 'integer', not_null => 1 },
    name         => { type => 'varchar', length => 255, not_null => 1 },

    vendor_id    => { type => 'int' },
    status       => { type => 'varchar', default => 'inactive', 
                      length => 128, not_null => 1 },
    date_created => { type => 'timestamp', not_null => 1, 
                      default => 'now()' },
    release_date => { type => 'timestamp' },
  );

  __PACKAGE__->meta->primary_key_columns('id');
  __PACKAGE__->meta->add_unique_key('name');

  __PACKAGE__->meta->relationships
  (
    prices => 'one to many',
    colors => 'many to many',
  );

  __PACKAGE__->meta->initialize;

  1;


  package Price;

  use Product;

  use base 'My::DB::Object';

  __PACKAGE__->meta->table('prices');

  __PACKAGE__->meta->columns
  (
    id         => { type => 'serial', primary_key => 1, not_null => 1 },
    product_id => { type => 'int', not_null => 1 },
    region     => { type => 'char', length => 2, not_null => 1 },
    price => 
    {
      type      => 'decimal',
      precision => 10,
      scale     => 2,
      not_null  => 1,
      default   => 0.00 
    },
  );

  __PACKAGE__->meta->add_unique_key([ 'product_id', 'region' ]);
  __PACKAGE__->meta->add_foreign_key('product');
  __PACKAGE__->meta->initialize;

  1;


  package Color;  

  use base 'My::DB::Object';

  __PACKAGE__->meta->table('colors');
  __PACKAGE__->meta->columns
  (
    id   => { type => 'serial', primary_key => 1, not_null => 1 },
    name => { type => 'varchar', length => 255, not_null => 1 },
  );

  __PACKAGE__->meta->add_unique_key('name');
  __PACKAGE__->meta->initialize;

  1;


  package ProductColorMap;  

  use Product;
  use Color;

  use base 'My::DB::Object';

  __PACKAGE__->meta->table('product_color_map');
  __PACKAGE__->meta->columns
  (
    product_id => { type => 'int', not_null => 1 },
    color_id   => { type => 'int', not_null => 1 },
  );

  __PACKAGE__->meta->primary_key_columns('product_id', 'color_id');
  __PACKAGE__->meta->add_foreign_keys('product', 'color');
  __PACKAGE__->meta->initialize;

   1;
















=head1 DEVELOPMENT POLICY

The L<Rose development policy|Rose/"DEVELOPMENT POLICY"> applies to this, and all C<Rose::*> modules.  Please install L<Rose> from CPAN and then run "C<perldoc Rose>" for more information.

=head1 SUPPORT

Any L<Rose::DB::Objects> questions or problems can be posted to the L<Rose::DB::Object> mailing list.  To subscribe to the list or view the archives, go here:

L<http://lists.sourceforge.net/lists/listinfo/rose-db-object>

Although the mailing list is the preferred support mechanism, you can also email the author (see below) or file bugs using the CPAN bug tracking system:

L<http://rt.cpan.org/NoAuth/Bugs.html?Dist=Rose-DB-Object>

=head1 AUTHOR

John C. Siracusa (siracusa@mindspring.com)

=head1 COPYRIGHT

Copyright (c) 2005 by John C. Siracusa.  All rights reserved.  This program is
free software; you can redistribute it and/or modify it under the same terms
as Perl itself.
