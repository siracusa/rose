#summary Some common use cases / questions
#labels faq,howto

= Introduction =

This is a scratchpad of sorts of various common questions or use cases and how they're tackled in the rdbo mindset.

= Recipes or FAQs =

== How can I backup Rose objects? ==
_Answered by Jason Purdy_

Sometimes you may find yourself writing code that deletes objects and perhaps you'd like to back up the objects before they evaporate.

=== Simple Case ===
Rose::DB has Storable hooks such that you can automatically freeze/thaw Rose::DB objects, with a caveat that before you thaw, you need to `use My::DB` in order to bring about awareness of your database before the objects are reinstated. More explanation is available in its [http://search.cpan.org/~jsiracusa/Rose-DB-0.758/lib/Rose/DB.pm#SERIALIZATION documentation].

=== More Complex Case ===
Storable is great for one table with no relationships, but if you have one-to-many or many-to-many relationships with associated content, Storable will not be able to handle that. Instead, you can use the `as_json` and `new_from_json` helper methods from [http://search.cpan.org/dist/Rose-DB-Object/lib/Rose/DB/Object/Helpers.pm Rose::DB::Object::Helpers].

=== Most Complex Case ===
In [http://groups.google.com/group/rose-db-object/browse_thread/thread/9b5164f593e59345 one posting], it was pointed out that serializing objects with associated data in a many-to-many relationship will lead to redundant data and may cause problems when trying to restore the backup. In this case, it's recommended that you backup each table individually.

== How do I get the maximum value of a table? ==
_Answered by Jason Purdy_

Rose::DB::Object::Manager has functions for getting a count of objects, but what if you wanted to just get the maximum value out of all of the tables. In Ye Ol' Days of doing things, it'd be a simple matter of:

{{{
my $dbh = DBI->connect( ... );
my $sth = $dbh->prepare( 'SELECT MAX(last_sync) FROM contact' );
$sth->execute;
my ( $max_time ) = $sth->fetchrow_array;
$sth->finish;
$dbh->disconnect;
# roll your own parse_timestamp to convert $max_time to a DateTime obj (if you need it)
}}}

But as a mindful RDBO citizen, you want to know how to do this in the Rose way. _(NOTE: This is my approach and I definitely welcome improvements/suggestions)_ You could put this code in your Rose::DB::Object or Rose::DB::Object::Manager subclass.

{{{
sub get_maximum_timestamp {
    my $db = QSR::RDB->new; # QSR::RDB is a Rose::DB subclass example
    my $dbh = $db->dbh;
    my $sth = $dbh->prepare( 'SELECT MAX(last_sync) FROM contact' );
    $sth->execute;
    my ( $t ) = $sth->fetchrow_array;
    my $max = $db->parse_timestamp( $t );
    $sth->finish;
    $dbh->disconnect;
    return $max;
}
}}}

Then in your application, you would have something like this:

{{{
# ...
my $max = QSR::RDB::Contact->get_maximum_timestamp;
# now you can do whatever you want w/ $max
# $max is a DateTime object
}}}

This recipe is specific to MySQL's SQL specification, so if you're using another database flavor, you'll have to modify the SQL code above. This code can also be tweaked to use other aggregate operations, such as MIN(), AVERAGE(), etc.